package polinomio;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Polinomio {

	private int grado;
	private double[] coeficiente;

	// La posicion 0 del arreglo de coeficientes con tiene el coeficiente de grado n 
	// y la posicion n con tiene al termino independiente.

	public int getGrado() {
		return grado;
	}
	public void setGrado(int grado) {
		this.grado = grado;
	}

	public double[] getCoeficiente() {
		return coeficiente;
	}

	public double getCoorCoeficiente(int i) {
		return coeficiente[i];
	}

	public void setCoeficiente(double[] coeficiente) {
		this.coeficiente = coeficiente;
	}

	public Polinomio(){ 
		this.setCoeficiente(null);
		this.setGrado(0);
	}

	public Polinomio(double[] coeficiente, int grado){ 
		this.setCoeficiente(coeficiente);
		this.setGrado(grado);
	}
	
	public Polinomio(String path) throws FileNotFoundException{
		Scanner sc = new Scanner(new File(path));
		
		grado = sc.nextInt();
		coeficiente = new double[grado+1];
		for(int i=0; i<=grado; i++){
			coeficiente[i] = sc.nextDouble();
		}
		sc.close();
	}

	public double potencia(double x, int grado ){
		if( grado == 0)
			return 1;
		return 	x*potencia(x,grado-1);			
	}
	/*
	public double potenciaPar(double x, int i){
		if(i==1)
			return 1;
		return potenciaPar(x*x, i/2);
	}
	*/
	
	
	public double potenciaPar(double x, int grado ){
		if( grado == 0)
			return 1;
		if( ( (grado) % 2) == 1 ) 	
			return x*potenciaPar( x, grado-1 );
		return potenciaPar( x*x,( grado )/2);
	}


	// style c.
	public double evaluarMSucesivas(double x ){
		double resultado = 0;
		double potencia;
		double termino;
		for( int i = 0; i < this.getGrado() ; i++ )
		{
			potencia = 1;
			termino = 0;
			for( int j = 0; j <this.getGrado()-i  ; j++)
				potencia *= x;
			termino = this.getCoorCoeficiente( i )*potencia;
			resultado += termino;
		}
		resultado += this.getCoorCoeficiente( this.getGrado() );
		return resultado;
	}

	// Potencia recursiva, re poco otimo stack feo :c
	public double evaluarRecursiva(double x ) { 
		double resultado = 0;
		double potencia;

		for( int i = 0; i < this.getGrado() ; i++ ){
			potencia = potencia( x,this.getGrado()-i);
			resultado += this.getCoorCoeficiente( i )*potencia;
		}

		resultado += this.getCoorCoeficiente( this.getGrado() );
		return resultado;
	}

	// Considerando exponente par o inpar (caso optimizado del anterior).
    public double evaluarRecursivaPar(double x ) {
		double resultado = 0;
		for( int i = 0; i < this.getGrado() ; i++ ){	
			resultado += this.getCoorCoeficiente( i )*potenciaPar(x,this.getGrado()-i );
		}
		resultado += this.getCoorCoeficiente( this.getGrado() );
		return resultado;
	}
    /*
	public double evaluarRecursivaPar(double x){
		double resultado = coeficiente[grado];
		for(int i=0; i<grado; i++){
			if(grado-i%2 == 0)
				resultado += potenciaPar(x, grado-i) * coeficiente[i];
			else
				resultado += potencia(x, grado-i) * coeficiente[i];
		}
		return resultado;
	}
	*/
	
	// La programacion Dinamica consiste en reutilizar lo ya calculado. 
	// al estilo optimo matematico Dani 3.0.
	public double evaluarProgDinamica(double x ) {
		double resultado = 0;
		double potencia = 1; // este es el x elevado a la potencia, en la primera es 1 porque x^0 = 1;
		for( int i = this.getGrado(); i >= 0  ; i-- )
		{	
			resultado += this.getCoorCoeficiente( i )*potencia;
			potencia *= x; // Aca incremento el exponente en 1.
		}
		return resultado;
	}

	//Mejorada de la programacion dinamica n-1
	public double evaluarMejorada(double x ) {
		double resultado = 0;
		double potencia;
		for( int i = 0; i < this.getGrado() ; i++ )
		{
			potencia = 1;
			for( int j = i; j <this.getGrado()  ; j++)
				potencia *= x;
			resultado += this.getCoorCoeficiente( i )*potencia;
		}
		resultado += this.getCoorCoeficiente( this.getGrado() );
		return resultado;
	}
	
	// Al estilo java, poco optimo orible (sin h).
	public double evaluarPow(double x){
		double resultado = coeficiente[grado];
		for(int i=0; i<grado; i++){
			resultado += Math.pow(x, grado-i) * coeficiente[i];
		}
		return resultado;
	}
	/*
	public double evaluarHorner2(double x){
		double resultado = 1;
		for(int i=0; i<grado; i++){
			resultado += x * coeficiente[i] + coeficiente[i+1];
		}
		return resultado;
	}*/

	public double evaluarHorner(double x){
		double resultado = 0;
		resultado = coeficiente[grado]*x;
		for (int i = grado - 1; i >= 1; i--) 
			resultado = (resultado + coeficiente[i]) * x;
		
		return resultado+coeficiente[0];
	}
	
}